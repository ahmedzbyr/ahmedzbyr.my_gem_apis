#!/usr/bin/env python

import os
import google.generativeai as genai

class GeminiAPI:
    """
    A client class to interact with the Google Gemini API.

    This class handles the configuration, connection, and communication
    with the Gemini model. It is designed to be easily extensible.
    """

    def __init__(self, api_key: str, model_name: str = "gemini-2.0-flash"):
        """
        Initializes the Gemini API client.

        Args:
            api_key (str): The API key for authenticating with the Google AI services.
            model_name (str): The name of the model to use (default: "gemini-2.0-flash").
        
        Raises:
            ValueError: If the API key is not provided.
            Exception: For any other issues during model initialization.
        """
        if not api_key:
            raise ValueError("API key cannot be empty.")

        try:
            genai.configure(api_key=api_key)
            self.model = genai.GenerativeModel(model_name)
            print("âœ… GeminiAPI client initialized successfully.")
        except Exception as e:
            print(f"ðŸ”¥ Failed to initialize Gemini model: {e}")
            raise

    def get_response(self, prompt: str) -> str:
        """
        Sends a prompt to the Gemini API and returns the textual response.

        Args:
            prompt (str): The input text/question to send to the model.

        Returns:
            str: The text response generated by the model.
                 Returns an error message string if the API call fails.
        """
        if not prompt:
            return "Error: Prompt cannot be empty."

        try:
            print(f"ðŸ’¬ Sending prompt to Gemini: '{prompt[:30]}...'")
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            error_message = f"ðŸ”¥ An error occurred while fetching the response: {e}"
            print(error_message)
            return error_message

# Example of how to use this class
if __name__ == "__main__":
    # It's best practice to load the API key from an environment variable
    # for security.
    # export GEMINI_API_KEY='YOUR_API_KEY'
    
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

    if not GEMINI_API_KEY:
        print("ðŸ”¥ Error: GEMINI_API_KEY environment variable not set.")
        print("Please set it using: export GEMINI_API_KEY='your-api-key'")
    else:
        try:
            # 1. Instantiate the client
            gemini_client = GeminiAPI(api_key=GEMINI_API_KEY)

            # 2. Define a prompt
            my_prompt = "Explain what an Ansible 'module_utils' is in a single sentence."

            # 3. Get the response
            api_response = gemini_client.get_response(my_prompt)

            # 4. Print the result
            print("\n" + "="*50)
            print("Prompt Sent:")
            print(my_prompt)
            print("\nGemini's Response:")
            print(api_response)
            print("="*50 + "\n")

        except ValueError as ve:
            print(f"Initialization failed: {ve}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")